{
  "name": "gulp-tsc",
  "version": "0.7.0",
  "author": {
    "name": "Kota Saito",
    "email": "kotas.nico@gmail.com",
    "url": "https://github.com/kotas"
  },
  "copyright": "2014 Kota Saito",
  "contributors": [
    {
      "name": "Cai Lei",
      "url": "https://github.com/ccll"
    }
  ],
  "description": "TypeScript compiler for gulp.js",
  "license": "MIT",
  "homepage": "https://github.com/kotas/gulp-tsc/",
  "bugs": {
    "url": "https://github.com/kotas/gulp-tsc/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kotas/gulp-tsc.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha && ./node_modules/.bin/gulp --gulpfile test-e2e/gulpfile.js"
  },
  "keywords": [
    "gulpplugin",
    "typescript",
    "gulp",
    "tsc",
    "compile",
    "transpile",
    "compiler"
  ],
  "dependencies": {
    "async": "^0.6.2",
    "through2": "^0.4.1",
    "gulp-util": "^2.2.14",
    "xtend": "^2.1.2",
    "which": "^1.0.5",
    "byline": "^4.1.1",
    "temp": "^0.7.0",
    "vinyl-fs": "^0.1.0",
    "rimraf": "^2.2.6",
    "resolve": "^0.6.1",
    "typescript": "^1.0.0"
  },
  "devDependencies": {
    "gulp": "^3.5.5",
    "gulp-clean": "^0.2.4",
    "gulp-expect-file": "^0.0.4",
    "run-sequence": "^0.3.6",
    "should": "^3.1.3",
    "mocha": "^1.17.1",
    "sinon": "^1.9.0",
    "event-stream": "^3.1.0",
    "glob": "^3.2.9"
  },
  "optionalDependencies": {
    "typescript": "^1.0.0"
  },
  "readme": "# gulp-tsc [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url]\n> TypeScript compiler for gulp 3\n\n## Usage\n\nFirst, install `gulp-tsc` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-tsc\n```\n\nThen, add it to your `gulpfile.js`:\n\n```js\nvar typescript = require('gulp-tsc');\n\ngulp.task('compile', function(){\n  gulp.src(['src/**/*.ts'])\n    .pipe(typescript())\n    .pipe(gulp.dest('dest/'))\n});\n```\n\n## API\n\n### typescript(options)\n\n#### options.tscPath\nType: `String`\nDefault: `null`\n\nThe path to `tsc` command for compile.\n\nIf not set, this plugin searches for `tsc` command in the order as described below:\n\n1. from `typescript` module installed as your project's dependency (i.e. `require(\"typescript\")` on current directory)\n2. from PATH of the running shell (using [node-which](https://github.com/isaacs/node-which))\n3. from Bundled `typescript` module\n\n(This search list can be modified by [options.tscSearch](#optionstscsearch))\n\nSo, if you want to use other version of `tsc` command, you can add any version of `typescript` module to your project's dependecy.\n\nHowever, this plugin could fail to run the future `tsc` because of incompatible changes of arguments.\n\n#### options.tscSearch\nType: `Array` of `String`\nDefault: `['cwd', 'shell', 'bundle']`\n\nThis options changes how this plugin searches for `tsc` command on your system.\n\nSee [options.tscPath](#optionstscpath) for details.\n\n#### options.emitError\nType: `Boolean`\nDefault: `true`\n\nIf set to true, this plugin emits `error` event on compilation failure, which causes gulp to abort running task.\n\nSee [Error handling](#error-handling) for details.\n\n#### options.module\nType: `String` (`\"commonjs\"` or `\"amd\"`)\nDefault: `\"commonjs\"`\n\n`--module` option for `tsc` command.\n\n#### options.target\nType: `String` (`\"ES3\"` or `\"ES5\"`)\nDefault: `\"ES3\"`\n\n`--target` option for `tsc` command.\n\n#### options.out\nType: `String`\nDefault: `null`\n\n`--out` option for `tsc` command.\n\n#### options.outDir\nType: `String`\nDefault: `null`\n\nA path to the directory where output files are finally going to.\n\nThis option does not affect the actual output directory for `tsc` command.\n\nSee [options.sourcemap](#optionssourcemap) for usage of this option.\n\n#### options.mapRoot\nType: `String`\nDefault: `null`\n\n`--mapRoot` option for `tsc` command.\n\n#### options.sourceRoot\nType: `String`\nDefault: `null`\n\n`--sourceRoot` option for `tsc` command.\n\n#### options.allowbool\nType: `Boolean`\nDefault: `false`\n\n`--allowbool` option for `tsc` command. (version 0.9.1.1)\n\n#### options.allowimportmodule\nType: `Boolean`\nDefault: `false`\n\n`--allowimportmodule` option for `tsc` command. (version 0.9.1.1)\n\n#### options.declaration\nType: `Boolean`\nDefault: `false`\n\n`--declaration` option for `tsc` command.\n\nGenerated `.d.ts` file is also piped into the stream.\n\n#### options.noImplicitAny\nType: `Boolean`\nDefault: `false`\n\n`--noImplicitAny` option for `tsc` command.\n\n#### options.noResolve\nType: `Boolean`\nDefault: `false`\n\n`--noResolve` option for `tsc` command.\n\n#### options.removeComments\nType: `Boolean`\nDefault: `false`\n\n`--removeComments` option for `tsc` command.\n\n#### options.sourcemap\nType: `Boolean`\nDefault: `false`\n\n`--sourcemap` option for `tsc` command.\n\nGenerated `.js.map` file is also piped into the stream.\n\n**Notice**: If your output files are NOT going to `{working directory}/something/` (to a directory beneath the working directory), you have to tell your output path to gulp-tsc by `outDir` option or `sourceRoot` option.\n\nIf you have a gulp task like this:\n\n```\ngulp.task('compile', function(){\n  gulp.src(['src/**/*.ts'])\n    .pipe(typescript({ sourcemap: true }))\n    .pipe(gulp.dest('foo/bar/'))\n});\n```\n\nOutput files are going under `{working directory}/foo/bar/`, but sourcemap files will contain a relative path to source files from `{working directory}/foo/` which is not correct.\n\nTo fix the relative path, just specify `outDir` with your `gulp.dest` path.\n\n```\ngulp.task('compile', function(){\n  gulp.src(['src/**/*.ts'])\n    .pipe(typescript({ sourcemap: true, outDir: 'foo/bar/' }))\n    .pipe(gulp.dest('foo/bar/'))\n});\n```\n\nThis is because of gulp's mechanism which does not allow gulp plugins to know where the output files are going to be stored finally.\n\ngulp-tsc assumes that your output files go into `{working directory}/something/` so that the relative paths in sourcemap files are based on that path by default.\n\n`sourceRoot` option is an absolute path to the source location, so you can also fix this problem by specifying it instead of `outDir`.\n\n#### options.tmpDir\nType: `String`\nDefault: `''` (current working directory)\n\nA path relative to current working directory, where a temporary build folder will be put in.\n\n**Notice**: If you use this option with sourcemaps, consider to specify `outDir` or `sourceRoot`. See [options.sourcemap](#optionssourcemap) for details.\n\nIf you are watching some files in current working directory with gulp.watch(), the creation of temporary build folder will trigger a folder change event.\n\nIf this is unexpected, you can put temp folders in a non-watched directory with this option.\n\nExample:\n```\ngulp.task('tsc', function() {\n  return gulp.src(src.ts)\n        .pipe(tsc({tmpDir:'.tmp'}))\n        .pipe(gulp.dest('.tmp/js'));\n});\n```\n\nThis will put a temporary folder in '.tmp'.\n\nSee [Temporary directory and file by gulp-tsc](#temporary-directory-and-file-by-gulp-tsc) for details.\n\n#### options.noLib\nType: `Boolean`\nDefault: `false`\n\n`--noLib` option for `tsc` command.\n\nSet `noLib` to `true` will dramatically reduce compile time, because 'tsc' will ignore builtin declarations like 'lib.d.ts'.\n\nSo if you are not using 'lib.d.ts' or prefer speed, set this to `true`. (In my case `noLib:true` only takes 25% time compared to `noLib:false`)\n\n#### options.keepTree\nType: `Boolean`\nDefault: `true`\n\nIf set to false, gulp-tsc skips creating a temporary file in your source directory which is used for keeping source directory structure in output.\n\nSee [Temporary directory and file by gulp-tsc](#temporary-directory-and-file-by-gulp-tsc) for details.\n\n## Error handling\n\nIf gulp-tsc fails to compile files, it emits `error` event with `gutil.PluginError` as the manner of gulp plugins.\n\nThis causes gulp to stop running on TypeScript compile errors, which is sometimes a problem like using with `gulp.watch()`.\n\nIf you want to suppress the error, just pass `{ emitError: false }` to gulp-tsc like below.\n\n```\nvar typescript = require('gulp-tsc');\n\ngulp.task('default', function () {\n    gulp.watch('src/**/*.ts', ['compile'])\n});\n\ngulp.task('compile', function () {\n    return gulp.src('src/**/*.ts')\n        .pipe(typescript({ emitError: false }))\n        .pipe(gulp.dest('dest/'));\n});\n```\n\n## Temporary directory and file by gulp-tsc\n\nSince gulp-tsc uses `tsc` command internally for compiling TypeScript files, compiled JavaScript files require to be written on the file system temporarily.\n\nFor those compiled files, gulp-tsc creates a temporary directory named `gulp-tsc-tmp-*` in the current working directory. You can change the location of the temporary directory by [options.tmpDir](#optionstmpdir).\n\nIn addition, gulp-tsc also creates a temporary file named `.gulp-tsc-tmp-*.ts` in your source root directory while compiling. The source root is determined by your `gulp.src()`. (e.g. For `gulp.src(\"src/**/*.ts\")`, the source root is `src/`)\n\nThis is required for keeping your source directory structure in output since tsc command omits the common part of your output paths.\n\nIf you do not need to keep the structure, you can skip creating the temporary file by setting [options.keepTree](#optionskeeptree) to false.\n\n\n[npm-url]: https://npmjs.org/package/gulp-tsc\n[npm-image]: https://badge.fury.io/js/gulp-tsc.png\n[travis-url]: https://travis-ci.org/kotas/gulp-tsc\n[travis-image]: https://travis-ci.org/kotas/gulp-tsc.png?branch=master\n[daviddm-url]: https://david-dm.org/kotas/gulp-tsc\n[daviddm-image]: https://david-dm.org/kotas/gulp-tsc.png?theme=shields.io\n",
  "readmeFilename": "README.md",
  "_id": "gulp-tsc@0.7.0",
  "_from": "gulp-tsc@^0.7.0"
}
