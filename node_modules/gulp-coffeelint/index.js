'use strict';
var Args, PluginError, coffeelint, coffeelintPlugin, configfinder, createPluginError, formatOutput, fs, isLiterate, params, stylish, through2;

fs = require('fs');

through2 = require('through2');

Args = require('args-js/Args');

coffeelint = require('coffeelint');

configfinder = require('coffeelint/lib/configfinder');

stylish = require('coffeelint-stylish');

PluginError = (require('gulp-util')).PluginError;

isLiterate = function(file) {
  return /\.(litcoffee|coffee\.md)$/.test(file);
};

createPluginError = function(message) {
  return new PluginError('gulp-coffeelint', message);
};

formatOutput = function(results, opt, literate) {
  var errs, warns;
  errs = 0;
  warns = 0;
  results.map(function(result) {
    var level;
    level = result.level;
    if (level === 'error') {
      errs++;
    }
    if (level === 'warn') {
      return warns++;
    }
  });
  return {
    success: results.length === 0 ? true : false,
    results: results,
    errorCount: errs,
    warningCount: warns,
    opt: opt,
    literate: literate
  };
};

params = [
  {
    optFile: Args.STRING | Args.Optional
  }, {
    opt: Args.OBJECT | Args.Optional
  }, {
    literate: Args.BOOL | Args.Optional
  }, {
    rules: Args.ARRAY | Args.Optional,
    _default: []
  }
];

coffeelintPlugin = function() {
  var e, literate, opt, optFile, rules, _ref;
  try {
    _ref = Args(params, arguments), opt = _ref.opt, optFile = _ref.optFile, literate = _ref.literate, rules = _ref.rules;
  } catch (_error) {
    e = _error;
    throw createPluginError(e);
  }
  if (Array.isArray(opt)) {
    rules = opt;
    opt = void 0;
  }
  rules.map(function(rule) {
    if (typeof rule !== 'function') {
      throw createPluginError("Custom rules need to be of type function, not " + (typeof rule));
    }
    return coffeelint.registerRule(rule);
  });
  if (toString.call(optFile) === '[object String]') {
    try {
      opt = JSON.parse(fs.readFileSync(optFile).toString());
    } catch (_error) {
      e = _error;
      throw createPluginError("Could not load config from file: " + e);
    }
  }
  return through2.obj(function(file, enc, cb) {
    var fileLiterate, fileOpt, output, results;
    fileOpt = opt;
    fileLiterate = literate;
    results = null;
    output = null;
    if (file.isNull()) {
      this.push(file);
      return cb();
    }
    if (file.isStream()) {
      this.emit('error', createPluginError('Streaming not supported'));
      return cb();
    }
    if (fileOpt === void 0) {
      fileOpt = configfinder.getConfig(file.path);
    }
    if (fileLiterate === void 0) {
      fileLiterate = isLiterate(file.path);
    }
    results = coffeelint.lint(file.contents.toString(), fileOpt, fileLiterate);
    output = formatOutput(results, fileOpt, fileLiterate);
    file.coffeelint = output;
    this.push(file);
    return cb();
  });
};

coffeelintPlugin.reporter = function() {
  var reporter;
  reporter = stylish.reporter;
  return through2.obj(function(file, enc, cb) {
    if (!file.coffeelint || file.coffeelint.success) {
      this.push(file);
      return cb();
    }
    reporter(file.relative, file.coffeelint.results);
    this.push(file);
    return cb();
  });
};

module.exports = coffeelintPlugin;
