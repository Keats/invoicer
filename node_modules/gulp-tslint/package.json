{
  "name": "gulp-tslint",
  "preferGlobal": false,
  "version": "1.1.0",
  "author": {
    "name": "Panu Horsmalahti",
    "email": "panu.horsmalahti@iki.fi"
  },
  "description": "TypeScript linter Gulp plugin",
  "contributors": [
    {
      "name": "Panu Horsmalahti",
      "email": "panu.horsmalahti@iki.fi"
    }
  ],
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/panuhorsmalahti/gulp-tslint.git"
  },
  "keywords": [
    "gulp",
    "typescript",
    "plugin",
    "ts",
    "gulpplugin",
    "gulpfriendly",
    "tslint",
    "linter",
    "lint"
  ],
  "dependencies": {
    "tslint": "~0.4.5",
    "map-stream": "~0.1.0",
    "through": "~2.3.4",
    "gulp-util": "~2.2.14",
    "rcloader": "~0.1.1"
  },
  "analyze": true,
  "devDependencies": {},
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "readme": "gulp-tslint\n=========\n\nTypeScript linter plugin for Gulp.\n\n\nFirst install gulp-tslint\n```shell\nnpm install --save-dev gulp-tslint\n```\n\n\nUsage:\n```javascript\nvar tslint = require('gulp-tslint');\n\ngulp.task('tslint', function(){\n      gulp.src('source.ts')\n        .pipe(tslint())\n        .pipe(tslint.report('verbose'));\n});\n```\n\ntslint.json is attempted to be read from near the input file.\n\nThe output (stringified JSON) is added to file.tslint.output.\nYou can output the errors by using reporters.\nThere are four default reporters:\n* 'json' prints stringified JSON to console.log.\n* 'prose' prints short human-readable failures to console.log.\n* 'verbose' prints longer human-readable failures to console.log.\n* 'full' is like verbose, but displays full path to the file\n\nReporters are executed only if there is at least one failure.\n\nIf there is at least one failure, by default a PluginError is\nthrown after execution of the reporters:\n```javascript\n[gulp] Error in plugin 'gulp-tslint': Failed to lint: invalid.ts\n```\n\nYou can prevent throwing the error by setting emitError to false when you're\ninvoking the reporter.\n\n```javascript\ngulp.task('invalid-noemit', function(){\n      gulp.src('invalid.ts')\n        .pipe(tslint())\n        .pipe(tslint.report('prose', {\n          emitError: false\n        }));\n});\n```\n\nYou can use your own reporter by supplying a function.\n```javascript\n/* Output is in the following form:\n * [{\n *   \"name\": \"invalid.ts\",\n *   \"failure\": \"missing whitespace\",\n *   // Lines and characters start from 0\n *   \"startPosition\": {\"position\": 8, \"line\": 0, \"character\": 8},\n *   \"endPosition\": {\"position\": 9, \"line\": 0, \"character\": 9},\n *   \"ruleName\": \"one-line\"\n * }]\n */\nvar testReporter = function (output, file, options) {\n    // file is a reference to the vinyl File object\n    console.log(\"Found \" + output.length + \" errors in \" + file.path);\n    // options is a reference to the reporter options, e.g. options.emitError\n};\n\ngulp.task('invalid-custom', function(){\n      gulp.src('invalid.ts')\n        .pipe(tslint())\n        .pipe(tslint.report(testReporter));\n});\n```\n\ntslint.json can be supplied as a parameter by setting the configuration property.\n```javascript\ngulp.task('tslint-json', function(){\n      gulp.src('invalid.ts')\n        .pipe(tslint({\n            configuration: {\n              rules: {\n                \"class-name\": true,\n                // ...\n              }\n            }\n        }))\n        .pipe(tslint.report('prose'));;\n});\n```\n\nAll default options\n```javascript\nvar options = {\n    configuration: {},\n    rulesDirectory: null,\n    formattersDirectory: null\n};\n```\n\nDevelopment\n===========\n\nFork this repository, run npm install and send pull requests.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/panuhorsmalahti/gulp-tslint/issues"
  },
  "_id": "gulp-tslint@1.1.0",
  "_from": "gulp-tslint@^1.1.0"
}
